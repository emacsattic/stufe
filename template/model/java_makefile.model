# Options for the makefile


# Name of the project (also the name of the output)
PROJECT = %project-name%

# Path of the output (full directory name, without environment
#  variable)
PROJECTPATH = .

# Options to pass to the program
OPTION = 

# Other folder to compile
DIRS = 

# Verbose compiling
#   yes: command line used are displayed
#   no: command line used are not displayed
VERBOSE = no

# Debuging informations
#   no: no debug information 
#   yes: debug info for jdb
DEBUGINFO = yes

#*****************************************************************#
#*                                                               *#
#* You shouldn't have to modify this part. You have to know      *#
#* exactly what you are doing. If you really want to modify it   *#
#* then maybe it is better to modify directly the template       *#
#* associated                                                    *#
#*                                                               *#
#*****************************************************************#


#
# Define default options for the project. They are used only 
# if they are not already defined
#

# Default name of the output
ifeq ($(strip $(PROJECT)),)
PROJECT = project
endif
# Default path of the output
ifeq ($(strip $(PROJECTPATH)),)
PROJECTPATH = .
endif
# Default debugging information
ifeq ($(strip $(DEBUGINFO)),)
DEBUGINFO = no
endif
# Default path to clean for this project
ifeq ($(findstring .,$(PROJECT)), .)
	PATHTOCLEAN = $(PROJECTPATH)/$(subst .,/,$(basename $(PROJECT)))
else
	PATHTOCLEAN = $(PROJECTPATH)
endif




#
# Define the default program to use. Same as options: they
# are used only if they are not already defined
#

# Default Java compiler
ifeq ($(strip $(JAVA_COMPILER)),)
JAVA_COMPILER = javac
endif
# Default Java interpreter
ifeq ($(strip $(JAVA_INTERPRETER)),)
JAVA_INTERPRETER = java
endif


#
# Define command line options from the makefile options
#

# Set the debug mark if the verbose option is no. It will be used
# when calling the command line
ifeq ($(VERBOSE),no)
 DEBUGMARK = @
endif

# Debugging information options
ifeq ($(DEBUGINFO),yes)
 DEBUGINFOFLAG = -g
endif

# We define exactly what file is the output of the project
OUTPUTFILENAME = $(subst .,/,$(PROJECT)).class


# Define the command for the C++ compiler
JAVAC = $(DEBUGMARK)$(JAVA_COMPILER)
# Define the command for the C++ compiler
JAVA = $(DEBUGMARK)$(JAVA_INTERPRETER)


#
# The next step is to make lists of the files we want to compile
#

# List of the source file
SRCS := $(wildcard *.java)


# 
# All the options and commands are now define. So, we can start
# to defining the target to build the program
#

# We first define the file to build
PROJECTFILE := $(PROJECTPATH)/$(OUTPUTFILENAME)


# This is the default target. It points to the other folder to build
# and the program to build
all: subdirs $(PROJECTFILE)

# Start by compiling the other folders
GOALS := $(subst tests,$(EMPTY),$(MAKECMDGOALS))
subdirs:
  ifneq ($(strip $(DIRS)),)
	@for dir in $(DIRS); do $(MAKE) -C $$dir $(GOALS); done
  endif

$(PROJECTFILE): $(SRCS) makefile
	@echo "Building..."
	$(JAVAC) -classpath $(CLASSPATH):$(PROJECTPATH) $(DEBUGINFOFLAG) -d $(PROJECTPATH) *.java
	@echo "The project '$(PROJECT)' has been build."

#
# We define a target to be able to clean all the build files
#
clean : subdirs
	@echo "Cleaning class file(s)..."
	@find $(PATHTOCLEAN) -name *.class -tests rm -f {} \;

#
# We define a target to be able to run the program
# This will disappear when stufe will be finished
#

# We first fix this variable in case a script 
# file has been found in the current folder
SCRIPT := $(wildcard script)

tests:  subdirs $(PROJECTFILE)
ifneq ($(strip $(SCRIPT)),)
# We found a script so we run it
	./$(SCRIPT)
else
# We didn't find a script file, so we run the program
	$(JAVA) -cp $(CLASSPATH):$(PROJECTPATH) $(PROJECT) $(OPTION)
endif


.PHONY : all tests clean subdirs


